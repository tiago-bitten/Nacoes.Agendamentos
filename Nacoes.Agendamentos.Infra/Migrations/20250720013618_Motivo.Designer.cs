// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nacoes.Agendamentos.Infra.Contexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Nacoes.Agendamentos.Infra.Migrations
{
    [DbContext(typeof(NacoesDbContext))]
    [Migration("20250720013618_Motivo")]
    partial class Motivo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Nacoes.Agendamentos.Domain.Entities.Agendas.Agenda", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean")
                        .HasColumnName("inactive");

                    b.HasKey("Id")
                        .HasName("pk_agenda");

                    b.HasIndex("Id", "DataCriacao")
                        .HasDatabaseName("ix_agenda_id_created_at");

                    b.ToTable("agenda", (string)null);
                });

            modelBuilder.Entity("Nacoes.Agendamentos.Domain.Entities.Agendas.Agendamento", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AgendaId")
                        .HasColumnType("uuid")
                        .HasColumnName("agenda_id");

                    b.Property<Guid>("AtividadeId")
                        .HasColumnType("uuid")
                        .HasColumnName("atividade_id");

                    b.Property<DateTimeOffset>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean")
                        .HasColumnName("inactive");

                    b.Property<string>("Origem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("origem");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("VoluntarioMinisterioId")
                        .HasColumnType("uuid")
                        .HasColumnName("voluntario_ministerio_id");

                    b.Property<Guid?>("agenda_id")
                        .HasColumnType("uuid")
                        .HasColumnName("agenda_id");

                    b.HasKey("Id")
                        .HasName("pk_agendamento");

                    b.HasIndex("AtividadeId")
                        .HasDatabaseName("ix_agendamento_atividade_id");

                    b.HasIndex("VoluntarioMinisterioId")
                        .HasDatabaseName("ix_agendamento_voluntario_ministerio_id");

                    b.HasIndex("agenda_id")
                        .HasDatabaseName("ix_agendamento_agenda_id");

                    b.HasIndex("Id", "DataCriacao")
                        .HasDatabaseName("ix_agendamento_id_created_at");

                    b.ToTable("agendamento", null, t =>
                        {
                            t.Property("agenda_id")
                                .HasColumnName("agenda_id1");
                        });
                });

            modelBuilder.Entity("Nacoes.Agendamentos.Domain.Entities.Ministerios.Atividade", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Descricao")
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean")
                        .HasColumnName("inactive");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<Guid?>("ministerio_id")
                        .HasColumnType("uuid")
                        .HasColumnName("ministerio_id");

                    b.HasKey("Id")
                        .HasName("pk_atividade");

                    b.HasIndex("ministerio_id")
                        .HasDatabaseName("ix_atividade_ministerio_id");

                    b.HasIndex("Id", "DataCriacao")
                        .HasDatabaseName("ix_atividade_id_created_at");

                    b.ToTable("atividade", (string)null);
                });

            modelBuilder.Entity("Nacoes.Agendamentos.Domain.Entities.Ministerios.Ministerio", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Descricao")
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean")
                        .HasColumnName("inactive");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("pk_ministerio");

                    b.HasIndex("Id", "DataCriacao")
                        .HasDatabaseName("ix_ministerio_id_created_at");

                    b.ToTable("ministerio", (string)null);
                });

            modelBuilder.Entity("Nacoes.Agendamentos.Domain.Entities.Usuarios.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AuthType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("auth_type");

                    b.Property<DateTimeOffset>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean")
                        .HasColumnName("inactive");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<string>("Senha")
                        .HasColumnType("text")
                        .HasColumnName("senha");

                    b.HasKey("Id")
                        .HasName("pk_usuario");

                    b.HasIndex("Id", "DataCriacao")
                        .HasDatabaseName("ix_usuario_id_created_at");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("Nacoes.Agendamentos.Domain.Entities.Usuarios.UsuarioConvite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("DataExpiracao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_expiracao");

                    b.Property<Guid?>("EnviadoParaId")
                        .HasColumnType("uuid")
                        .HasColumnName("enviado_para_id");

                    b.Property<Guid>("EnviadoPorId")
                        .HasColumnType("uuid")
                        .HasColumnName("enviado_por_id");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean")
                        .HasColumnName("inactive");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("motivo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.HasKey("Id")
                        .HasName("pk_usuario_convite");

                    b.HasIndex("EnviadoParaId")
                        .HasDatabaseName("ix_usuario_convite_enviado_para_id");

                    b.HasIndex("EnviadoPorId")
                        .HasDatabaseName("ix_usuario_convite_enviado_por_id");

                    b.HasIndex("Id", "DataCriacao")
                        .HasDatabaseName("ix_usuario_convite_id_created_at");

                    b.ToTable("usuario_convite", (string)null);
                });

            modelBuilder.Entity("Nacoes.Agendamentos.Domain.Entities.Voluntarios.Voluntario", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean")
                        .HasColumnName("inactive");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("pk_voluntario");

                    b.HasIndex("Id", "DataCriacao")
                        .HasDatabaseName("ix_voluntario_id_created_at");

                    b.ToTable("voluntario", (string)null);
                });

            modelBuilder.Entity("Nacoes.Agendamentos.Domain.Entities.Voluntarios.VoluntarioMinisterio", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean")
                        .HasColumnName("inactive");

                    b.Property<Guid>("MinisterioId")
                        .HasColumnType("uuid")
                        .HasColumnName("ministerio_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid?>("voluntario_id")
                        .HasColumnType("uuid")
                        .HasColumnName("voluntario_id");

                    b.HasKey("Id")
                        .HasName("pk_voluntario_ministerio");

                    b.HasIndex("voluntario_id")
                        .HasDatabaseName("ix_voluntario_ministerio_voluntario_id");

                    b.HasIndex("Id", "DataCriacao")
                        .HasDatabaseName("ix_voluntario_ministerio_id_created_at");

                    b.ToTable("voluntario_ministerio", (string)null);
                });

            modelBuilder.Entity("Nacoes.Agendamentos.Domain.Entities.Agendas.Agenda", b =>
                {
                    b.OwnsOne("Nacoes.Agendamentos.Domain.ValueObjects.Horario", "Horario", b1 =>
                        {
                            b1.Property<Guid>("AgendaId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTime?>("DataFinal")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("horario_data_final");

                            b1.Property<DateTime>("DataInicial")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("horario_data_inicial");

                            b1.HasKey("AgendaId");

                            b1.ToTable("agenda");

                            b1.WithOwner()
                                .HasForeignKey("AgendaId")
                                .HasConstraintName("fk_agenda_agenda_id");
                        });

                    b.Navigation("Horario")
                        .IsRequired();
                });

            modelBuilder.Entity("Nacoes.Agendamentos.Domain.Entities.Agendas.Agendamento", b =>
                {
                    b.HasOne("Nacoes.Agendamentos.Domain.Entities.Ministerios.Atividade", null)
                        .WithMany()
                        .HasForeignKey("AtividadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_agendamento_atividade_atividade_id");

                    b.HasOne("Nacoes.Agendamentos.Domain.Entities.Voluntarios.VoluntarioMinisterio", null)
                        .WithMany()
                        .HasForeignKey("VoluntarioMinisterioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_agendamento_voluntario_ministerio_voluntario_ministerio_id");

                    b.HasOne("Nacoes.Agendamentos.Domain.Entities.Agendas.Agenda", null)
                        .WithMany("Agendamentos")
                        .HasForeignKey("agenda_id")
                        .HasConstraintName("fk_agendamento_agenda_agenda_id");
                });

            modelBuilder.Entity("Nacoes.Agendamentos.Domain.Entities.Ministerios.Atividade", b =>
                {
                    b.HasOne("Nacoes.Agendamentos.Domain.Entities.Ministerios.Ministerio", null)
                        .WithMany("Atividades")
                        .HasForeignKey("ministerio_id")
                        .HasConstraintName("fk_atividade_ministerio_ministerio_id");
                });

            modelBuilder.Entity("Nacoes.Agendamentos.Domain.Entities.Ministerios.Ministerio", b =>
                {
                    b.OwnsOne("Nacoes.Agendamentos.Domain.ValueObjects.Cor", "Cor", b1 =>
                        {
                            b1.Property<Guid>("MinisterioId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Tipo")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("cor_tipo");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("cor");

                            b1.HasKey("MinisterioId");

                            b1.ToTable("ministerio");

                            b1.WithOwner()
                                .HasForeignKey("MinisterioId")
                                .HasConstraintName("fk_ministerio_ministerio_id");
                        });

                    b.Navigation("Cor")
                        .IsRequired();
                });

            modelBuilder.Entity("Nacoes.Agendamentos.Domain.Entities.Usuarios.Usuario", b =>
                {
                    b.OwnsOne("Nacoes.Agendamentos.Domain.ValueObjects.Celular", "Celular", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Ddd")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("celular_ddd");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("celular_numero");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("usuario");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId")
                                .HasConstraintName("fk_usuario_usuario_id");
                        });

                    b.OwnsOne("Nacoes.Agendamentos.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("email");

                            b1.Property<string>("ConfirmationCode")
                                .HasColumnType("text")
                                .HasColumnName("email_codigo_confirmacao");

                            b1.Property<DateTimeOffset?>("ConfirmationCodeExpiration")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("email_data_expiracao_codigo_confirmacao");

                            b1.Property<bool>("IsConfirmed")
                                .HasColumnType("boolean")
                                .HasColumnName("email_confirmado");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("usuario");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId")
                                .HasConstraintName("fk_usuario_usuario_id");
                        });

                    b.Navigation("Celular");

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("Nacoes.Agendamentos.Domain.Entities.Usuarios.UsuarioConvite", b =>
                {
                    b.HasOne("Nacoes.Agendamentos.Domain.Entities.Usuarios.Usuario", "EnviadoPara")
                        .WithMany()
                        .HasForeignKey("EnviadoParaId")
                        .HasConstraintName("fk_usuario_convite_usuario_enviado_para_id");

                    b.HasOne("Nacoes.Agendamentos.Domain.Entities.Usuarios.Usuario", "EnviadoPor")
                        .WithMany()
                        .HasForeignKey("EnviadoPorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_usuario_convite_usuario_enviado_por_id");

                    b.OwnsOne("Nacoes.Agendamentos.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UsuarioConviteId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("email");

                            b1.HasKey("UsuarioConviteId");

                            b1.ToTable("usuario_convite");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioConviteId")
                                .HasConstraintName("fk_usuario_convite_usuario_convite_id");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("EnviadoPara");

                    b.Navigation("EnviadoPor");
                });

            modelBuilder.Entity("Nacoes.Agendamentos.Domain.Entities.Voluntarios.Voluntario", b =>
                {
                    b.OwnsOne("Nacoes.Agendamentos.Domain.ValueObjects.Celular", "Celular", b1 =>
                        {
                            b1.Property<Guid>("VoluntarioId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Ddd")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("celular_ddd");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("celular_numero");

                            b1.HasKey("VoluntarioId");

                            b1.ToTable("voluntario");

                            b1.WithOwner()
                                .HasForeignKey("VoluntarioId")
                                .HasConstraintName("fk_voluntario_voluntario_id");
                        });

                    b.OwnsOne("Nacoes.Agendamentos.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("VoluntarioId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("email");

                            b1.Property<string>("ConfirmationCode")
                                .HasColumnType("text")
                                .HasColumnName("email_codigo_confirmacao");

                            b1.Property<DateTimeOffset?>("ConfirmationCodeExpiration")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("email_data_expiracao_codigo_confirmacao");

                            b1.Property<bool>("IsConfirmed")
                                .HasColumnType("boolean")
                                .HasColumnName("email_confirmado");

                            b1.HasKey("VoluntarioId");

                            b1.ToTable("voluntario");

                            b1.WithOwner()
                                .HasForeignKey("VoluntarioId")
                                .HasConstraintName("fk_voluntario_voluntario_id");
                        });

                    b.OwnsOne("Nacoes.Agendamentos.Domain.ValueObjects.CPF", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("VoluntarioId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("cpf");

                            b1.HasKey("VoluntarioId");

                            b1.ToTable("voluntario");

                            b1.WithOwner()
                                .HasForeignKey("VoluntarioId")
                                .HasConstraintName("fk_voluntario_voluntario_id");
                        });

                    b.OwnsOne("Nacoes.Agendamentos.Domain.ValueObjects.DataNascimento", "DataNascimento", b1 =>
                        {
                            b1.Property<Guid>("VoluntarioId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateOnly>("Valor")
                                .HasColumnType("date")
                                .HasColumnName("data_nascimento");

                            b1.HasKey("VoluntarioId");

                            b1.ToTable("voluntario");

                            b1.WithOwner()
                                .HasForeignKey("VoluntarioId")
                                .HasConstraintName("fk_voluntario_voluntario_id");
                        });

                    b.Navigation("Celular");

                    b.Navigation("Cpf");

                    b.Navigation("DataNascimento");

                    b.Navigation("Email");
                });

            modelBuilder.Entity("Nacoes.Agendamentos.Domain.Entities.Voluntarios.VoluntarioMinisterio", b =>
                {
                    b.HasOne("Nacoes.Agendamentos.Domain.Entities.Voluntarios.Voluntario", null)
                        .WithMany("Ministerios")
                        .HasForeignKey("voluntario_id")
                        .HasConstraintName("fk_voluntario_ministerio_voluntario_voluntario_id");
                });

            modelBuilder.Entity("Nacoes.Agendamentos.Domain.Entities.Agendas.Agenda", b =>
                {
                    b.Navigation("Agendamentos");
                });

            modelBuilder.Entity("Nacoes.Agendamentos.Domain.Entities.Ministerios.Ministerio", b =>
                {
                    b.Navigation("Atividades");
                });

            modelBuilder.Entity("Nacoes.Agendamentos.Domain.Entities.Voluntarios.Voluntario", b =>
                {
                    b.Navigation("Ministerios");
                });
#pragma warning restore 612, 618
        }
    }
}
